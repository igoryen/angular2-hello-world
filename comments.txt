1. Import the dependencies.
    This is a list of constants.
    Pull in the modules you want to use to write your code.
    These modules are JS/TS objects.
    Here we do the Destructuring in {...}.

2. The location of the dependencies. 

3.

4. OnInit: helps us to run code when 

5. This is an annotation. 
    This is metadata added to your code.
    Declare the component.
    You want to use the component on your class.
    Therefore you "decorate" the class as a Component.

6. The selector name for your new tag.
    You define a new HTML markup tag.
    You want to use this new selector in your HTML.
    Your new selector will have the form of 
    <app-hello-world></app-hello-world>.
    You will use the new Component by using this new tag.
    Now, any <app-hello-world></app-hello-world> in the template
    will be compiled using this Component class and all its definitions within it.

7. The HTML file from which to load your template.
    It's content is standard HTML markup.
    This file will live in the same directory as your component.
    When Angular loads this component, 
    it will also read from this HTML file and use it as the template for this Component.

    Another way to add a template is to put the HTML directly into the TS file
    using the 'template' key and backticks:
    template:  `<p>Hello World!</p>`

8. The CSS file to use for this Component.
    These styles are specified for this particular Component,
    and they will apply only to this Component.
    It's called "style-encapsulation".

    The value of this property is an array,
    so you can load multiple stylesheets for a single Component.

9. This HTML file is a template that is already being rendered.
    After you create your new Component you need to start using it.
    Add the component to the template. 
    That means add the tag you created to the template.

10. Input annotation.
    Provides a way to pass data into this Component 
    being a child Component from the Parent Template.
    Propety name: "name".
    Property value type: String.

11. The constructor to run when a new instance of the class is created.

12. The templating syntax - the two squiggly brackets.
    They are "template tags" or "mustache tags".
    They expand the content as an Expression.
    The Template is bound to the Component.
    To display the variable in the template. 

13. Two ways of defining an array of strings:
    a) names: string[];
    b) names: Array<string>;

14. *ngFor is a directive.
    Akin to a for loop.
    To iterate over an array and generate a DOM element (a tag) for each one.

15. Using another Component as a Child Component.
    Here: user-item ( not <li> ) as a child of user-list.
    Don't use any content in the template 
    because the Component has its own template.

    `[foo]` means "pass a value to the input named "foo"
    in that Component.

    Thus:
    pass a value to the input "name" in app-user-item Component.
    [name]="name" means: 
    input "name" in app-user-item gets the value 
    of the next array element (even though it is double- quoted).
    [name] designates the input on the UserItemComponent.
    Equivalent:
    *ngFor = "let x of names" [name]="x"
    x designates the `Input` on the `UserInputComponent`.

12. Add the module if you want to use it as an annotation in your code.
    e.g. Input.

13. @NgModule annotation.
    It has 3 properties:
    declarations, imports, bootstrap.

14. app.module.ts/@NgModule/declaration:
    Specifies the components that are defined in this module.
    This array updated when you run `ng generate`.

15. app.module.ts/@NgModule/imports:
    This module has such and such dependencies.

16. The BrowserModule:
    required if you are creating a browser app.

17. app.module.ts/@NgModule/bootstrap:
    Angular, when you bootstrap the app using this module,
    you need to load this Component (e.g. AppComponent)
    as the top-level component.

